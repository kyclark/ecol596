dat.dir = "~/work/ecol596/data"
# << DATASETS >>
#--Call in the sla data into a data frame called 'sla'.
sla = read.csv(file.path(dat.dir, "sla.csv"))
sla
head(sla)
sla[[l]] == NA
sla[sla[[l]] == NA]
sla$l == NA
sla[sla$l == NA]
sla[sla$l == NA,]
sla[ -sla[sla$l == NA] ]
which(sla$l == NA)
which(sla[sla$l == NA])
which(sla[[sla$l == NA]])
which(sla[sla$l == NA,])
which(sla[sla$l == NA,])
sla[sla$l == NA,]
sla[sla$l != NA]
sla[sla$l != NA,]
sla[!sla$l == NA,]
sla[!sla$l == NA,l]
sla[!sla$l == NA,"l"]
sla[sla$l != NA,"l"]
sla[is.na(sla$l),"l"]
is.na(sla$l
)
sla[is.na(sla$l)]
sla[is.na(sla$l),]
sla[is.na(sla$l),'l']
sla[!is.na(sla$l),]
sla[-is.na(sla$l),]
sla[!is.na(sla$l),]
data = sla
data.col = "l"
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
data
nrow(data)
nrow(sla)
sla[!is.na(sla$l),]
sla[is.na(sla$l),]
is.na(sla$l)
is.na(sla$lv)
is.na(sla$whole)
sla
is.na(sla$p)
data.col = "p"
#--Eliminate rows with NAs in the 'data.col'.
nrow(data)
data = data[!is.na(data[[data.col]]),]
nrow(data)
sla
sla
data = sla
data.col = "l"
group.col = "soil"
group.1 = "C"
group.2 = "S"
data = data[!is.na(data[[data.col]]),]
data
grp1.rows = data[ data[[group.col]] == group.1 ]
grp1.rows
grp1.rows = data[[group.col]] == group.1
grp1.rows
grp1.rows = which(data[[group.col]] == group.1)
grp1.rows = which(data[[group.col]] == group.1)
grp1.rows
grp2.rows = which(data[[group.col]] == group.2)
length(grp1.rows)
n2 = length(grp2.rows)
mean1 = mean(data[grp1.rows])
grp1.rows
data[grp1.rows]
mean1 = mean(data[grp1.rows], data.col)
mean1 = mean(data[grp1.rows, data.col])
mean1
mean2 = mean(data[grp2.rows, data.col])
mean2
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df <- n1 + n2 - 2
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss1
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
ss2
pooled.var <- (ss1 + ss2) / df
pooled.var <- (sum(ss1) + sum(ss2)) / df
sum(ss1)
(sum(ss1) + sum(ss2))
df
df = n1 + n2 - 2
df
n1 + n2 - 2
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
df
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var <- (sum(ss1) + sum(ss2)) / df
pooled.var
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
t
p <- pt(t, df)
p
t
p
p = pt(t, df)
p
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
#--Return the p value with return().
return p
}
data = sla
data.col = "l"
group.col = "soil"
group.1 = "C"
group.2 = "S"
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
#--Return the p value with return().
return p
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
#--Return the p value with return().
return p
}
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
# Return the p value with return().
return p
}
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
# Return the p value with return().
return p;
}
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t <- (mean1 - mean2) / sqrt((pooled.var/n1) + (pooled.var/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
# Return the p value with return().
return(p)
}
sig_t(sla, "l", "soil", "C", "S")
sig_t <- function (data, data.col, group.col, group.1, group.2) {
#--Eliminate rows with NAs in the 'data.col'.
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
# First, get the sum of squares for each group (sum of the squared deviations from the
# group mean).
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss2 = (data[grp2.rows, data.col] - mean1) ^ 2
# Now, get the pooled variance = sum of sums of squares divided by degrees of freedom.
pooled.var = (sum(ss1) + sum(ss2)) / df
#--Calculate the t statistic. The order of the means, i.e. which mean is subtracted from
# which in the numerator, doesn't matter since this is a two-tailed test.
t = (mean1 - mean2) / sqrt(pooled.var * (1/n1 + 1/n2))
#--Calculate the p value from the cumulative distribution function for the
# t-distribution. I.e., where does your t value sit in the t-distribution for the number
# of degrees of freedom you have? This is done with function pt(q, df). Put our t value
# in the first argument, and degrees of freedom in the second.
p = pt(t, df)
# Convert the p value to a two-tailed p.
if (p >= 0.5) { p = (1-p) * 2 } else { p = p*2 }
# Return the p value with return().
return(p)
}
sig_t(sla, "l", "soil", "C", "S")
sig_t(sla, "l", "soil", "C", "S")
data = sla
data.col = "l"
group.col = "soil"
group.1 = "C"
group.2 = "S"
data = data[!is.na(data[[data.col]]),]
#--Make row-indexing objects containing the ROW NUMBERS for the two groups.
grp1.rows = which(data[[group.col]] == group.1)
grp2.rows = which(data[[group.col]] == group.2)
#--Calculate the sample size in each group.
n1 = length(grp1.rows)
n2 = length(grp2.rows)
#--Get the mean value for each group.
mean1 = mean(data[grp1.rows, data.col])
mean2 = mean(data[grp2.rows, data.col])
#--Calculate the degrees of freedom (total sample size minus one for each mean
# estimated).
df = n1 + n2 - 2
#--Calculate the pooled variance of the data.
data[grp1.rows, data.col]
119.81993 - mean1
(119.81993 - mean1) ^ 2
ss1 = (data[grp1.rows, data.col] - mean1) ^ 2
ss1
(141.46040 - mean1) ^ 2
pooled.var = (sum(ss1) + sum(ss2)) / df
pooled.var
t = (mean1 - mean2) / sqrt(pooled.var * (1/n1 + 1/n2))
t.test(data[grp1.rows, data.col])
t.test()
t.test(data[grp1.rows, data.col], data[grp2.rows, data.col])
t = (mean1 - mean2) / sqrt(pooled.var * (1/n1 + 1/n2))
t
mean1
mean2
