FrF2(nruns=4, nfactors=4)
FrF2(nruns=4, nfactors=3)
FrF2(nruns=8, nfactors=4)
FrF2(nruns=8, nfactors=4, resolution = 3)
FrF2(nfactors=4, resolution = 3)
FrF2(nfactors=5, resolution = 3)
FrF2(nfactors=4, nruns=8)
filter = data.frame(
A = c(-1, 1, -1, 1, -1, 1, -1, 1),
B = c(-1, -1, 1, 1, -1, -1 , 1, 1),
C = c(rep(-1,4), rep(1,4)),
D = c(-1, 1, 1, -1, 1, -1, -1, 1),
y = c(45, 100, 45, 65, 75, 60, 80, 96)
)
filter
lmod = lm(y ~ A + B + C + D + AB + AC + AD)
A = filter$A
B = filter$B
C = filter$C
D = filter$D
filter$AB = A*B
filter$AC = A*C
filter$AD = A*D
lmod = lm(y ~ A + B + C + D + AB + AC + AD)
lmod = lm(y ~ A + B + C + D + AB + AC + AD, filter)
plot(fitted(lmod), resid(lmod))
summary(lmod)
filter
for (v in c("A", "B", "C", "D", "AB", "AC", "AD")) {
filter[[paste0(v, 'f')]] = factor(filter[[v]])
}
filter
lmod = lm(y ~ Af + Bf + Cf + Df + ABf + ACf + ADf, filter)
plot(fitted(lmod), resid(lmod))
summary(lmod)
library("FrF2")
DanielPlot(lmod)
?DanielPlot
DanielPlot(lmod, autolab=F)
colnames(filter)
colnames(filter) != "y"
colnames(filter)[colnames(filter) != "y"]
?grep
grep("y", colnames(filter), invert=R)
grep("y", colnames(filter), invert=T)
filter = data.frame(
A = c(-1, 1, -1, 1, -1, 1, -1, 1),
B = c(-1, -1, 1, 1, -1, -1 , 1, 1),
C = c(rep(-1,4), rep(1,4)),
D = c(-1, 1, 1, -1, 1, -1, -1, 1),
y = c(45, 100, 45, 65, 75, 60, 80, 96)
)
A = filter$A
B = filter$B
C = filter$C
D = filter$D
filter$AB = A*B
filter$AC = A*C
filter$AD = A*D
for (v in c("A", "B", "C", "D", "AB", "AC", "AD")) {
filter[[v]] = factor(filter[[v]])
}
filter
for (v in c("A", "B", "C", "D", "AB", "AC", "AD")) {
filter[[v]] = factor(filter[[v]])
}
lmod = lm(y ~ A + B + C + D + AB + AC + AD, filter)
plot(fitted(lmod), resid(lmod))
summary(lmod)
library("FrF2")
DanielPlot(lmod, autolab=F)
a = b = 1
a
b
a = 1
a
filter = data.frame(
A = c(-1, 1, -1, 1, -1, 1, -1, 1),
B = c(-1, -1, 1, 1, -1, -1 , 1, 1),
C = c(rep(-1,4), rep(1,4)),
D = c(-1, 1, 1, -1, 1, -1, -1, 1),
y = c(45, 100, 45, 65, 75, 60, 80, 96)
)
A = filter$A
B = filter$B
C = filter$C
D = filter$D
AB = filter$AB = A*B
AC = filter$AC = A*C
AD = filter$AD = A*D
filter$y %*% cbind(A, B, C, D, AB, AC, AD)
n=8
filter$y %*% cbind(A, B, C, D, AB, AC, AD/(8*n))
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"))
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"))
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
?lower
??lowercase
lowerCase("FOO")
toLower("FOO")
tolower("FOO")
colnames(glop)
colnames(glop) = tolower(colnames(glop))
colnames(glop)
big
colnames(big)
summary(big)
?grep
?Filter
Filter(function (c) is.factor(c), colnames(glop))
Filter(function (c) { is.factor(c) }, colnames(glop))
colnames(glop)
Filter(function (c) { is.factor(glop[[c]]) }, colnames(glop))
for (colname in Filter(function (c) { is.factor(glop[[c]]) }, colnames(glop))) {
print(colname)
}
colnames(glop)
Filter(function (c) { is.factor(glop[[c]]) }, colnames(glop))
summary(glop)
for (colname in Filter(function (c) { is.factor(glop[[c]]) }, colnames(glop))) {
glop[[colname]] = as.character(glop[[colname]])
}
summary(glop)
for (ds in c(big, glop)) {
for (colname in Filter(function (c) { is.factor(ds[[c]]) }, colnames(ds))) {
ds[[colname]] = as.character(ds[[colname]])
}
}
summary(big)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"))
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
summary(big)
for (ds in c(big, glop)) {
for (colname in Filter(function (c) { is.factor(ds[[c]]) }, colnames(ds))) {
ds[[colname]] = as.character(ds[[colname]])
}
}
summary(glop)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"))
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
summary(glop.char)
big.char = factor2char(big)
big.char
summary(big.char)
colnames(big)
?head
head(big, n=1)
t(head(big, n=1))
?strsplit
big.char$genus = strsplit(big.char$sp, split="_")
t(head(big, n=1))
t(head(big.char, n=1))
big.char[1]
big.char[1, "sp"]
strsplit(big.char[1, "sp"], split="_")
big.char$sp
big.char$genus = strsplit(big.char[,sp], split="_")
big.char[[sp]]
big.char[["sp]]
big.char[["sp"]]
big.char$genus = strsplit(big.char[["sp"]], split="_")
t(head(big.char, n=1))
big.char$genus = paste(strsplit(big.char[["sp"]], split="_"))
t(head(big.char, n=1))
big.char$genus = paste(strsplit(big.char[["sp"]], split="_"), collapse=" ")
t(head(big.char, n=1))
big.char[["sp"]]
big.char$genus = paste(strsplit(big.char["sp"], split="_"), collapse=" ")
big.char$genus = paste(strsplit(big.char$sp split="_"), collapse=" ")
big.char$genus = paste(strsplit(big.char$sp, split="_"), collapse=" ")
t(head(big.char, n=1))
?Map
big.char$genus = Map(function (x) { paste(x, collapse=" ") }, strsplit(big.char$sp, split="_"))
t(head(big.char, n=1))
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
t(head(big.char, n=1))
big.char$genus = strsplit(big.char$sp, split="_")[1]
t(head(big.char, n=1))
library("scrub_taxa.R")
library("./scrub_taxa.R")
source("./scrub_taxa.R")
source("scrub_taxa.R")
setwd("~/work/ecol596/Class Exercise 5")
source("scrub_taxa.R")
?scrub_taxa
scrub_taxa()
t(head(big.char, n=1))
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
setwd("~/work/ecol596/Class Exercise 5")
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"))
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
#--Do the same for 'glop'.
big.char = factor2char(big)
#--Make a genus column in 'big' by splitting on a "_" separator.
# - First, try out strsplit() on a single species entry.
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
# - Index the result of strsplit() to retrieve the first element on its own, the genus.
# - Add and fill a genus column in 'big' by looping strsplit() across the species.
#--Use the scrub_taxa() function (in "scrub_taxa.R") to get standardized taxon names for
# 'big' based on results in 'big.tnrs' (from the Taxonomic Name Resolution Service).
# - Source in the scrub_taxa() function in the 'ce5.dir' with source().
source("scrub_taxa.R")
# - How do you make R show you the arguments for scrub_taxa()?
# - Try to use scrub taxa to produce a scrubbed version of 'big' with this code:
# scrub_taxa (big, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
t(head(big.char, n=1))
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
t(head(big.tnrs, n=1))
?read.csv
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"), as.is=T)
str(big)
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"), as.is=T)
str(big.tnrs)
tmp = data.frame(one=as.character(c("a", "b", "c")))
str(trmp)
str(tmp)
tmp = data.frame(one=as.character(c(1,2,3)))
str(tmp)
tmp = data.frame(one=c(1,2,3))
str(tmp)
rm(tmp)
?sapply
big$sp
big.char$genus = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
big.char$genus2 = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
chk = function (x) t(head(x,n=1))
chk(big.char)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
setwd("~/work/ecol596/Class Exercise 5")
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"), as.is=T)
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
#--Do the same for 'glop'.
big.char = factor2char(big)
#--Make a genus column in 'big' by splitting on a "_" separator.
# - First, try out strsplit() on a single species entry.
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
big.char$genus = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
# - Index the result of strsplit() to retrieve the first element on its own, the genus.
# - Add and fill a genus column in 'big' by looping strsplit() across the species.
#--Use the scrub_taxa() function (in "scrub_taxa.R") to get standardized taxon names for
# 'big' based on results in 'big.tnrs' (from the Taxonomic Name Resolution Service).
# - Source in the scrub_taxa() function in the 'ce5.dir' with source().
source("scrub_taxa.R")
# - How do you make R show you the arguments for scrub_taxa()?
# - Try to use scrub taxa to produce a scrubbed version of 'big' with this code:
# scrub_taxa (big, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
chk(big.char)
chk(big.tnrs)
args(scrub_taxa)
?gsub
sub('_big.char$sp)
sub('_', ' ' big.char$sp)
sub('_', ' ', big.char$sp)
big.char$sp = sub('_', ' ', big.char$sp)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
E
big$sp %in% big.tnrs$Name_submitted
head(big)
head(big.char$sp)
head(big.tnrs$Name_submitted)
big.char$sp = gsub('_', ' ', big.char$sp)
big.char$sp = gsub('.\d+$', '', big.char$sp)
head(big.char$sp)
big.char$sp = gsub('.[[:digit:]]', '', big.char$sp)
head(big.char$sp)
big.char$sp = gsub('.[[:digit:]]+', '', big.char$sp)
big.char$sp = gsub('.[[:digit:]]+', '', big.char$sp)
head(big.char$sp)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
setwd("~/work/ecol596/Class Exercise 5")
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"), as.is=T)
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
#--Do the same for 'glop'.
big.char = factor2char(big)
#--Make a genus column in 'big' by splitting on a "_" separator.
# - First, try out strsplit() on a single species entry.
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
big.char$genus = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
# - Index the result of strsplit() to retrieve the first element on its own, the genus.
# - Add and fill a genus column in 'big' by looping strsplit() across the species.
#--Use the scrub_taxa() function (in "scrub_taxa.R") to get standardized taxon names for
# 'big' based on results in 'big.tnrs' (from the Taxonomic Name Resolution Service).
# - Source in the scrub_taxa() function in the 'ce5.dir' with source().
source("scrub_taxa.R")
# - How do you make R show you the arguments for scrub_taxa()?
args(scrub_taxa)
# - Try to use scrub taxa to produce a scrubbed version of 'big' with this code:
# scrub_taxa (big, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
# - Why did it fail? Read the error and warnings. Compare the first few species names in
# 'big' with 'submitted.names' in 'big.tnrs'.
big.char$sp = gsub('_', ' ', big.char$sp)
head(big.char$sp)
big.char$sp = gsub(' indet.[[:digit:]]+', '', big.char$sp)
head(big.char$sp)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
setwd("~/work/ecol596/Class Exercise 5")
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"), as.is=T)
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
#--Do the same for 'glop'.
big.char = factor2char(big)
#--Make a genus column in 'big' by splitting on a "_" separator.
# - First, try out strsplit() on a single species entry.
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
big.char$genus = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
# - Index the result of strsplit() to retrieve the first element on its own, the genus.
# - Add and fill a genus column in 'big' by looping strsplit() across the species.
#--Use the scrub_taxa() function (in "scrub_taxa.R") to get standardized taxon names for
# 'big' based on results in 'big.tnrs' (from the Taxonomic Name Resolution Service).
# - Source in the scrub_taxa() function in the 'ce5.dir' with source().
source("scrub_taxa.R")
# - How do you make R show you the arguments for scrub_taxa()?
args(scrub_taxa)
# - Try to use scrub taxa to produce a scrubbed version of 'big' with this code:
# scrub_taxa (big, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
# - Why did it fail? Read the error and warnings. Compare the first few species names in
# 'big' with 'submitted.names' in 'big.tnrs'.
# - Replace all underscores in the 'big' species column with " ".
big.char$sp = gsub('_', ' ', big.char$sp)
big.char$sp = gsub('indet.[[:digit:]]+', 'sp.', big.char$sp)
head(big.char$sp)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
#=========================================================================================
# R Class Exercise 5: miscellaneous drills.
#=========================================================================================
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Set two directory paths to the objects below. First is the "Tutorial datasets" folder,
# second is the "Class Exercise 5" folder.
setwd("~/work/ecol596/Class Exercise 5")
dat.dir = "~/work/ecol596/data"
ce5.dir = "~/work/ecol596/Class Exercise 5"
# << DATASETS >> -------------------------------------------------------------------------
#--Read in "simulated_big_data_131121.csv", "big.tnrs.full.detailed.csv" (in ce5.dir), and
# "glopnet.csv" as data frames, assigning to the objects below.
big = read.csv(file.path(dat.dir, "simulated_big_data_131121.csv"), as.is=T)
big.tnrs = read.csv(file.path(ce5.dir, "big.tnrs.full.detailed.csv"))
glop = read.csv(file.path(dat.dir, "glopnet.csv"))
# << PROBLEM SETS >> ---------------------------------------------------------------------
#--Convert all glopnet column names to lowercase.
colnames(glop) = tolower(colnames(glop))
#--Loop through the columns in 'big' converting factor columns to characters.
factor2char = function (d) {
for (colname in Filter(function (c) { is.factor(d[[c]]) }, colnames(d))) {
d[[colname]] = as.character(d[[colname]])
}
return(d)
}
glop.char = factor2char(glop)
#--Do the same for 'glop'.
big.char = factor2char(big)
#--Make a genus column in 'big' by splitting on a "_" separator.
# - First, try out strsplit() on a single species entry.
big.char$genus = Map(function (x) { x[1] }, strsplit(big.char$sp, split="_"))
big.char$genus = sapply(big$sp, function (s) { strsplit(s, split="_")[[1]][1]})
# - Index the result of strsplit() to retrieve the first element on its own, the genus.
# - Add and fill a genus column in 'big' by looping strsplit() across the species.
#--Use the scrub_taxa() function (in "scrub_taxa.R") to get standardized taxon names for
# 'big' based on results in 'big.tnrs' (from the Taxonomic Name Resolution Service).
# - Source in the scrub_taxa() function in the 'ce5.dir' with source().
source("scrub_taxa.R")
# - How do you make R show you the arguments for scrub_taxa()?
args(scrub_taxa)
# - Try to use scrub taxa to produce a scrubbed version of 'big' with this code:
# scrub_taxa (big, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
#scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
# - Why did it fail? Read the error and warnings. Compare the first few species names in
# 'big' with 'submitted.names' in 'big.tnrs'.
head(big.char$sp)
big.char$sp = gsub('_', ' ', big.char$sp)
head(big.char$sp)
big.char$sp = gsub('indet\.[[:digit:]]+', 'sp.', big.char$sp)
big.char$sp = gsub('indet[.][[:digit:]]+', 'sp.', big.char$sp)
head(big.char$sp)
scrub_taxa (big.char, big.tnrs, 'sp', TRUE, indet.nums=TRUE)
big$sp %in% big.tnrs$Name_submitted
