subset(glop, ll>30 & ll < 100, ll)
glop[glop$ll > 30]
unique(subset(glop, ll>30 & ll < 100, biome))
glop$ll[glop$ll > 30]
glop$ll[glop$ll > 30, "biome"]
glop$biome[glop$ll > 30]
unique(glop$biome[glop$ll > 30])
unique(glop[glop$ll > 30, "biome"])
unique(subset(glop, ll>30 & ll < 100, biome))
unique(glop$biome[glop$ll > 30])
unique(subset(glop, ll>30, "biome"))
unique(glop$biome[glop$ll > 30])
subset(glop, ll>30, "biome")
table(subset(glop, ll>30, "biome"))
?table
table(subset(glop, ll>30, "biome"))
x[setdiff(names(x), "chol")]
x[setdiff(names(x), c("dbp", "chol")]
x[setdiff(names(x), c("dbp", "chol"))]
x
speed <- c(100, 102, 103, 101, 105, 100, 99, 105)
distance <- c(257, 264, 274, 266, 277, 263, 258, 275)
plot(speed, distance)
abline(lm(speed ~ distance))
?abline
lm(speed ~ distance)
abline(lm(speed ~ distance))
plot(speed, distance)
abline(lm(speed ~ distance))
plot(shutter, fstop)
plot(shutter, fstop)
shutter <- c(1/1000, 1/500, 1/250, 1/125, 1/60, 1/30, 1/15, 1/8)
fstop <- c(2.8, 4, 5.6, 8, 11, 16, 22, 32)
plot(shutter, fstop)
abline(lm(shutter ~ fstop))
?lm
lm(speed ~ distance)
speed
distance
?gl
plot(speed, distance)
abline(lm(speed ~ distance))
hours <- c(159, 280, 101, 212, 224, 279, 179, 264, 222, 362, 168, 250, 149, 260, 485, 170)
hours.mean <- mean(hours)
hours.mean
hours <- c(159, 280, 101, 212, 224, 379, 179, 264, 222, 362, 168, 250, 149, 260, 485, 170)
hours.mean <- mean(hours)
hours.mean
hours.sd <- sd(hours)
hours.sd
t.test(hours)
t.test(hours, alternative = greater, conf.level = .05)
?t.test
t.test(hours, alternative = "greater, conf.level = .05)
t.test(hours, alternative = "greater", conf.level = .05)
t.test(hours, alternative = "g", conf.level = .05)
t.test(hours)
bp <- c(128, 127, 118, 115, 144, 142, 133, 140, 132, 131, 111, 132, 149, 122, 139, 119, 136, 129, 126, 128)
t.test(bp)
sd(bp)
t.test(bp, mu=120)
s95 <- c(11.176, 7.089, 8.097, 11.739, 11.291, 10.759, 6.467, 8.315)
s100 <- c(5.263, 6.748, 7.461, 7.015, 8.133, 7.418, 3.772, 8.963)
t.test(s95, s100)
t.test(s95, s100, conf.level = .05)
t.test(s95, s100, conf.level = .95)
??dotchart
dotchart(s95)
dotchart(s95, s100)
require("lattice")
plot(x = s95)
plot(x = s95)
?t
dotchart(t(s95))
dotchart(t(s95))
dotchart(s95)
s95
?dotchart
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
head(VADeaths)
data.frame(s95, s100)
dotchar(data.frame(s95, s100))
dotchart(data.frame(s95, s100))
mean(s95)
mean(s100)
??variance
var.linear(s95)
require("boot")
var.linear(s95)
sd(s95)
sqrt(var.linear(s95))
var(s95)
var(s100)
??ztest
s95 <- c(11.176, 7.089, 8.097, 11.739, 11.291, 10.759, 6.467, 8.315)
s100 <- c(5.263, 6.748, 7.461, 7.015, 8.133, 7.418, 3.772, 8.963)
t.test(s95, s100, conf.level = .95)
plot(s95)
plot(s95, s100)
data.dir = "~/work/ecol596w/data/"
setwd(data.dir)
glop = read.csv("glopnet.csv")
biomes = unique(glop$BIOME)
biomes
# (2) A loop to see a histogram of leaf mass-per-area (lma) data for each biome.
for (b in biomes) {
for (b in biomes) {
#--Make a subset of glop with only the biome corresponding to 'b'.
sub.glop <- glop [glop$BIOME==b, ]
#--Use hist() to make a histogram of the 'log.lma' data in the subsetted dataframe.
# ***
hist(sub.glop$log.LMA, main = b)
}
for (b in biomes) {
#--Make a subset of glop with only the biome corresponding to 'b'.
sub.glop <- glop [glop$BIOME==b, ]
#--Use hist() to make a histogram of the 'log.lma' data in the subsetted dataframe.
# ***
hist(sub.glop$log.LMA, main = b)
}
x[rep(1,5)]
#=========================================================================================
# Indexing in R: A tutorial on the gory nuances of pointing at things in R. Any questions,
# contact Ty Taylor: tytaylor@email.arizona.edu
#=========================================================================================
# << INTRODUCTION >> ---------------------------------------------------------------------
# Indexing is the most important skill in R. It is the base of everything else you will
# do. Indexing basically means "pointing at things", as in: You - "I want to do this", R -
# "Do it to what?", You - "To that thing", that last part is 'indexing'. The majority of
# problems that beginners run into with their scripts are due to incorrect indexing. A
# thorough understanding of the nuances of indexing allows you to develop from the stage
# of basic "hardcoding" in your scripts, to more flexible coding, and eventually to
# elegantly dynamic custom functions and your own "analysis pipelines".
# - "Hardcoding": your indexing points to specific features of specific datasets; the code
# performs operations with specific parameters that are difficult to change.
# - Flexible coding: you have built in the ability to easily change which features of
# which datasets are called, and which parameters are used in operations.
# - Analysis pipeline: scripts usually involving custom functions that are repeatedly used
# to process different datasets that are structurally similar. These can incorporate
# parameters that are easily changed to meet the user's desires for a particular dataset.
#=========================================================================================
# Tutorial contents
#=========================================================================================
#  Part 1:  Indexing in vectors
#  Part 2:  Indexing with logicals and objects
#  Part 3:  Indexing in matrices
#  Part 4:  Indexing in data frames
#  Part 5:  Indexing in lists
#  Part 6:  Advanced indexing - techniques, nuances, and nuisances
#=========================================================================================
# Introductory code
#=========================================================================================
# << DATASET INFORMATION >> --------------------------------------------------------------
# LIDAR data: There are four LIDAR datasets associated with this tutorial, named
# "lidar_t1.csv" through ".._t4.csv". LIDAR stands for Light Detection and Ranging. It is
# like RADAR, but with lasers. For these datasets, a ground-based LIDAR was used to walk
# four forest transects and determine the vertical distribution of leaves and wood. Each
# file represents a vertical slice through the forest, one for each transect. Each cell
# contains calculated leaf area density (LAD), or the area of leaves in a 1x1.8m cube of
# space. Each file has exactly the same dimensions: 60 x 556, which corresponds to 60 m
# height and 1000 m length.
# Note that the lidar files will be called in during Part 3 and Part 4 using the directory
# object 'dat.dir'.
# << DIRECTORIES >> ----------------------------------------------------------------------
#--Data directory.
dat.dir <- "~/work/ecol596w/data"
# << DATASETS >> -------------------------------------------------------------------------
# Load the glopnet.csv data into a data frame named 'glop'.
glop <- read.csv (file.path(dat.dir, "glopnet.csv"))
# << CLEAN/ORGANIZE DATA >> --------------------------------------------------------------
# To make things easier, make these changes to 'glop': make the column names lowercase,
# and change the second to last column name to "ca.ci".
colnames (glop) <- tolower (colnames (glop))
colnames (glop) [ncol(glop)-1] = "ca.ci"
#=========================================================================================
# Part 1:  Indexing in vectors
#=========================================================================================
#-----------------------------------------------------------------------------------------
# The three ways to index: position, name, logical
#-----------------------------------------------------------------------------------------
# We can index in three ways: position, name, logical (True/False). We will expand on
# these in the following sections of Part 1.
#--Make a vector to practice with. This one will have named elements (they don't have to
# have names), reflecting information about a person (cholesterol, blood pressure, and
# age.)
x <- c(chol = 234, sbp = 148, dpb = 78, age = 54)
#--View 'x'.
x
# << Indexing by position >> -------------------------------------------------------------
#--View the 3rd element of 'x'.
x[3]
#--View the 2nd and 4th elements of 'x'.
x[c(2,4)]
#--View the first element of 'x' five times in a row.
rep(x[1], 5)
# Note that that is the same as:
x[rep(1,5)]
x[rep(1,5)]
x[rep(1,5)]
x[rep(1,5)]
x
dat.dir <- "~/work/ecol596w/data"
# << DATASETS >> -------------------------------------------------------------------------
# Load the glopnet.csv data into a data frame named 'glop'.
glop <- read.csv (file.path(dat.dir, "glopnet.csv"))
# << CLEAN/ORGANIZE DATA >> --------------------------------------------------------------
# To make things easier, make these changes to 'glop': make the column names lowercase,
# and change the second to last column name to "ca.ci".
colnames (glop) <- tolower (colnames (glop))
colnames (glop) [ncol(glop)-1] = "ca.ci"
#-----------------------------------------------------------------------------------------
# The three ways to index: position, name, logical
#-----------------------------------------------------------------------------------------
# We can index in three ways: position, name, logical (True/False). We will expand on
# these in the following sections of Part 1.
#--Make a vector to practice with. This one will have named elements (they don't have to
# have names), reflecting information about a person (cholesterol, blood pressure, and
# age.)
x <- c(chol = 234, sbp = 148, dpb = 78, age = 54)
#--View 'x'.
x
# << Indexing by position >> -------------------------------------------------------------
#--View the 3rd element of 'x'.
x[3]
#--View the 2nd and 4th elements of 'x'.
x[c(2,4)]
#--View the first element of 'x' five times in a row.
rep(x[1], 5)
# Note that that is the same as:
x[rep(1,5)]
glop[,6:ncol(glop)]
head(glop[,6:ncol(glop)])
head(glop[6:ncol(glop)]) # comma is optional
glop[-4]
glop[-(2:4)]
head(glop[,-(1:5)])
x <- c(chol = 234, sbp = 148, dbp = 78, age = 54)
names(x)
class(names(x))
x[c("chol", "age")]
x2 <- rev(x)
x2
x[setdiff(names(x), c("dbp", "chol"))]
x[x < 100]
?subset
subset(x, x < 100)
x < 100
x [c(F,F,T,T)]
ll17 <- glop[glop$log.ll > 1.7, "log.ll"]
glop$log.ll[glop$log.ll > 1.7]
subset(glop, select=log.ll, log.ll > 1.7 & log.ll < 2)
glop$log.ll[which(glop$log.ll > 1.7)]
glop$ll = 10 ^ glop$log.ll
unique(glop[glop$ll > 30, "biome"])
unique(subset(glop, ll>30, "biome"))
unique(glop$biome[glop$ll > 30])
table(subset(glop, ll>30, "biome"))
x[x == "chol"]
x[x != "chol"]
x[x != "chol"]
x[name(x) != "chol"]
names(x)[x != "chol"]
names(x)[1]
x[1]
class(x[1])
??name
get(x[1])
?get
x.names = names(x)
x.names
x.names[x != "chol"]
x.names[x.names != "chol"]
x[x!="chol"]
names(x)[names(x)!="chol"]
names(x)[ names(x) != "chol" ]
names(x) != "chol"
x > 80
x < 70 | x > 200
x[x < 70 | x > 200]
x[x < 70]
x[x < 70 | x > 200]
glop <- read.csv("~/work/ecol596w/data/glopnet.csv")
colnames (glop) <- tolower (colnames (glop))
colnames (glop) [ncol(glop)-1] = "ca.ci"
colnames (glop) [names(glop)=="species"] = "epithet"
glop$species <- paste (glop$genus, glop$epithet, sep="_")
glop$ll <- 10 ^ glop$log.ll
head(glop)
names <- c("dopey", "grumpy", "doc", "happy", "bashful", "sneezy", "sleepy")
ages <- c(142, 240, 232, 333, 132, 134, 127)
sex <- c("m", "m", "f", "f", "f", "m", "m")
require("ggplot2")
library("ggplot2")
ggplot (data = glop, aes (log.ll, log.lma)) + geom_point (color="blue")
ggplot (data = glop[biome == "WLAND"], aes (log.ll, log.lma)) + geom_point (color="blue")
ggplot (data = glop[biome == "WLAND"], aes (log.ll, log.lma)) + geom_point (color="blue")
ggplot (data = subset(glop, biome == "WLAND"), aes (log.ll, log.lma)) + geom_point (color="blue")
subset(glop, biome == "WLAND")
head(subset(glop, biome == "WLAND"))
males = sex[sex == "m"]
males
males = sex == "m"
males
females = sex == "f"
females
males
females
ages
ages[males]
names[females]
sex[names[names == "bashful"]]
names == "bashful"
sex[names == "bashful"]
alpine <- glop[glop$biome == "ALPINE"]
head(glop$biome == "ALPINE")
glop[glop$biome == "ALPINE"]
alpine <- glop$biome == "ALPINE"
alpine
head(glop[alpine])
glop[alpine]
names(glop)
glop[alpine]
glop$biome[alpine]
glop[,alpine]
str(glop)
str(alpine)
head(glop$biome[alpine])
glop[alpine]
max(glop$ll, na.rm=T)
max(subset(glop, ll))
max(glop$ll, na.rm=T)
max(glop$ll[alpine])
glop$ll[alpine]
max(glop$ll[alpine], na.rm=T)
max(which(glop$ll[alpine]))
old <- ages[ages < 142]
old
young <- ages[ages <= 142]
old <- ages[ages >= 142]
young
old
ages
old <- ages[ages > 142]
old
young <- ages <= 142
old <- ages > 142
young
ol
old
names[old & females]
names
sex
ages
subset(glop, biome == "ALPINE", genus)
glop$genus[alpine]
glop.species <- subset(glop, biome == "ALPINE", species)
glop.species <- glop$species[alpine]
glop.species
glop.species / glop.genus
glop.genus <- glop$genus[alpine]
glop.species / glop.genus
glop.genus <- unique(glop$genus[alpine])
glop.genus <- table(glop$genus[alpine])
glop.genus
head(glop.genus)
subset(glop, genus == "Abies", genus)
subset(glop, genus == "Abies", biome)
table(subset(glop, biome == "ALPINE", genus))
glop.genus <- unique(glop$genus[alpine])
glop.genus <- glop$genus[alpine]
glop.genus
table(glop.genus)
dwarves <- data.frame (names, ages, sex)
table(glop.genus)
dwarves
dwares[old & males]
dwarves[old & males]
old & males
dwarves$names[old & males]
dwarves
dwarves$names
dwarves$names[males]
subset(dwarves, ages >= 142 & sex == "m")
old
subset(dwarves, ages > 142 & sex == "m")
subset(dwarves, ages > 142 & sex == "m", names)
subset(glop, ll > 10, genus)
unique(subset(glop, ll > 10, genus))
unique(subset(glop, biome == "ALPINE" & ll > 10, genus))
subset(glop, biome == "ALPINE" & ll > 10, genus)
table(subset(glop, biome == "ALPINE" & ll > 10, genus))
subset(glop, biome == "ALPINE" & ll > 10, genus)
glop$genus[alpine]
glop$genus[alpine & glop$ll > 10]
unique(glop$genus[alpine & glop$ll > 10])
dwarves[dwarves$names == "grumpy" xor females]
dwarves[dwarves$names == "grumpy" | females]
dwarves$ages[dwarves$names == "grumpy" | females]
dwarves
ggplot (data = glop, aes (x=ll, fill=biome)) + geom_histogram (position="dodge", binwidth=3)
ggplot (data = subset(glop, biome=="WLAND" | biome=="ALPINE", aes (x=ll, fill=biome)) + geom_histogram (position="dodge", binwidth=3)
ggplot (data = subset(glop, biome=="WLAND" | biome=="ALPINE"), aes (x=ll, fill=biome)) + geom_histogram (position="dodge", binwidth=3)
subset(glop, biome=="WLAND" | biome=="ALPINE")
ggplot (data = subset(glop, biome=="WLAND" | biome=="ALPINE"), aes (x=ll, fill=biome))
+ geom_histogram (position="dodge", binwidth=3)
ggplot (data = subset(glop, biome=="WLAND" | biome=="ALPINE"), aes (x=ll, fill=biome)) + geom_histogram (position="dodge", binwidth=3)
glop.genus <- glop$genus[alpine]
glop.genus
length(glop.genus)
glop.species <- glop$species[alpine]
glop.species
length(glop.species)
sort(glop.species)
table(glop.species)
length(glop.species) / length(glop.genus)
table(glop.genus)
glop.genus <- glop$genus[alpine]
table(glop.genus)
sort(glop.genus)
glop.genus <- as.character(glop$genus[alpine])
glop.genus
table(glop.genus)
length(glop.genus)
glop.genus <- glop$genus[alpine]
glop.genus <- unique(glop$genus[alpine])
?subset
glop.genus <- unique(subset(glop, biome == "ALPINE", genus))
glop.genus
length(glop.genus)
glop.species <- unique(glop$species[alpine])
length(glop.species) / length(glop.genus)
length(glop.species)
length(glop.genus)
glop.genus <- unique(glop$genus[alpine])
glop.genus
length(glop.genus)
length(glop.species) / length(glop.genus)
species.richness <- length(glop.species) / length(glop.genus)
species.richness
rf.richness = length(unique(subset(glop, biome == "TROP_RF", species))) / length(unique(subset(glop, biome == "TROP_RF", genus)))
rf.richness
unique(subset(glop, biome == "TROP_RF", species))
unique(subset(glop, biome == "TROP_RF", genus))
rf.richness = length(unique(subset(glop, biome == "TROP_RF", species))) / length(unique(subset(glop, biome == "TROP_RF", genus)))
rf.richness
length(unique(subset(glop, biome == "TROP_RF", species)))
unique(subset(glop, biome == "TROP_RF", species))
length(unique(subset(glop, biome == "TROP_RF", species)))
head(unique(subset(glop, biome == "TROP_RF", species)))
rf.species = unique(subset(glop, biome == "TROP_RF", species))
length(rf.species)
rf.species
subset(glop, biome == "TROP_RF", species)
length(subset(glop, biome == "TROP_RF", species))
class(subset(glop, biome == "TROP_RF", species))
?data.frame
nrows(subset(glop, biome == "TROP_RF", species))
nrow(subset(glop, biome == "TROP_RF", species))
glop.genus <- unique(subset(glop, biome == "ALPINE", genus))
class(glop.genus)
length(glop.genus)
rf.richness = nrow(unique(subset(glop, biome == "TROP_RF", species))) / nrow(unique(subset(glop, biome == "TROP_RF", genus)))
rf.richness
glop.genus <- unique(glop$genus[alpine])
glop.genus <- unique(glop$genus[alpine])
glop.species <- unique(glop$species[alpine])
species.richness <- length(glop.species) / length(glop.genus)
species.richness
rf.genus <- unique(glop$genus[glop$biome == "TROP_RF"])
rf.genus
rf.richness <- rf.ngenus / rf.nspecies
rf.richness
class(glop.genus)
ggplot (data = subset(glop, biome=="WLAND" | biome=="ALPINE"), aes (x=ll, fill=biome)) + geom_histogram (position="dodge", binwidth=3)
s95 <- c(11.176, 7.089, 8.097, 11.739, 11.291, 10.759, 6.467, 8.315)
s100 <- c(5.263, 6.748, 7.461, 7.015, 8.133, 7.418, 3.772, 8.963)
t.test(s95, s100, conf.level = .95)
sort(s95)
t.test(s95 ~ s100, conf.level = .95)
t.test(s95, s100, conf.level = .95)
hist(s95)
hist(s100)
plot(density(x))
plot(density(s95))
plot(density(s100))
lines(density(s95))
hist(s95)
lines(density(s95))
lines(density(s95))
plot(density(s95))
hist(s95, prob=T)
lines(density(s95))
hist(s95, prob=T)
curve(dnorm(x, mean=mean(s95), sd=sd(s95)), add=TRUE)
?dnorm
paper <- c(60, 70, 80, 60, 80, 80, 60, 80, 80, 80, 60)
computer <- c(50, 70, 60, 70, 60, 70, 70, 60, 60, 80, 90)
t.text(paper, computer)
t.test(paper, computer)
install.packages("pwr")
library(pwr)
library(pwr)
pwr.2p.test(s95, s100)
var(s95)
sd(s95)
sd(s100)
?va
?var
var(s95, s100)
cov(s95, s100)
t.test(paper, computer)
sort(s95)
