dat$fluid = factor(dat$fluid) # to turn integers into factors
plot(life ~ fluid, data=dat)
boxplot(life ~ fluid, data=dat, ylab = "Life", xlab = "Fluid")
lmod = lm(life ~ fluid, data=dat)
plot(residuals(lmod), main="Residuals life ~ fluid")
plot(lmod)
operators = factor(1:4)
order = factor(1:4)
operators
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', D', 'C', 'B', 'B', A', 'D', 'C')
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', A', 'D', 'C')
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
obs = c(10, 7, 5 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
obs = c(10, 7, 5 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operator, order, methods, obs)
df = data.frame(operators, order, methods, obs)
df
order = c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4))
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operators, order, methods, obs)
df
operators = c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4))
order = factor(1:4)
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operators, order, methods, obs)
df
operators = factor(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)))
order = factor(1:4)
methods = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operators, order, methods, obs)
df
operator = factor(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)))
order = factor(1:4)
method = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operators, order, methods, obs)
df = data.frame(operator, order, method, obs)
amod = aov(obs ~ operator + order + method)
df = data.frame(operator, order, method, obs)
df
matrix(df$obs, 4, 4)
amod = aov(obs ~ operator + order + method, df)
plot(amod)
summary(amod)
plot(obs ~ operator + order + method, df)
old = par(mfrow=c(2,2))
plot(obs ~ operator + order + method, df)
par(old)
plot(obs ~ operator + order + method, df)
old = par(mfrow=c(3,1))
plot(obs ~ operator + order + method, df)
old = par(mfrow=c(1,3))
plot(obs ~ operator + order + method, df)
lm = aov(obs ~ operator + order + method, df)
amod = anova(lm)
summary(amod)
?anova
?aov
amod
library(agricolae)
T1<-c("a","b","c","d")
T2<-c("v","w","x","y")
graeco <-  design.graeco(T1,T2,number=101)
plots <-as.numeric(graeco[,1])
trt <- paste(graeco[,4],graeco[,5])
dim(plots)<-c(4,4)
dim(trt) <-c(4,4)
print(t(plots))
print(t(trt))
library(agricolae)
T1<-c("a","b","c","d")
T2<-c("v","w","x","y")
graeco <-  design.graeco(T1,T2,number=101)
T1
T2
graeco <-  design.graeco(T1,T2,number=101)
?design.graeco
graeco <-  design.graeco(T1,T2,101)
graeco
plots <-as.numeric(graeco[,1])
graeco[,1]
class(graeco)
graeco[[,1]]
graeco[[1]]
graeco[[1]][1]
str(graeco)
graeco[[3]]$plots
#simulate some data, this without a priori knowledge of the parameter value
y<-runif(1,5,15)*exp(-runif(1,0.01,0.05)*x)+rnorm(51,0,0.5)
#visually estimate some starting parameter values
plot(x,y)
#from this graph set approximate starting values
a_start<-8 #param a is the y value when x=0
b_start<-2*log(2)/a_start #b is the decay rate
#model
m<-nls(y~a*exp(-b*x),start=list(a=a_start,b=b_start))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot the fit
lines(x,predict(m),col="red",lty=2,lwd=3)
y<-runif(1,5,15)*exp(-runif(1,0.01,0.05)*x)+rnorm(51,0,0.5)
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
par(old)
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
?runif
x
y
?nls
a
#simulate some data, this without a priori knowledge of the parameter value
y<-runif(1,5,15)*exp(-runif(1,0.01,0.05)*x)+rnorm(51,0,0.5)
#visually estimate some starting parameter values
plot(x,y)
#from this graph set approximate starting values
a_start<-8 #param a is the y value when x=0
b_start<-2*log(2)/a_start #b is the decay rate
#model
m<-nls(y~a*exp(-b*x),start=list(a=a_start,b=b_start))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot the fit
lines(x,predict(m),col="red",lty=2,lwd=3)
dat.dir = "~/work/ecol596/project/data"
setwd(dat.dir)
w    = 1
span = .4
i    = 0
dat = read.delim(file.path(dat.dir, "Ac2.fa"), sep=" ", header=F)
head(dat)
colnames(dat) = c("freq", "count")
x               = dat$freq
y               = dat$count
m = nls(y~a*x/(b+x))
x = dat$freq
y = dat$count
m = nls(y~a*x/(b+x))
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
?resid
tip = factor(rep(1,4), rep(2,4), rep(3, 4), rep(4,4))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.8, 9.5, 10.0,
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.8, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
df
matrix(df$response, 4, 4)
lmod = lm(response ~ tip + coupon)
lmod = lm(response ~ tip + coupon, data=df)
summary(lmod)
str(df)
amod = anova(response ~ tip + coupon, data=df)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
sum(dat$response)
sum(df$response)
sum(df$response) - 9.8
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.31, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
amod = anova(response ~ tip + coupon, data=df)
amod = anova(df$response ~ df$tip + df$coupon)
?anova
lmod = lm(response ~ tip + coupon, data=df)
amod = anova(lmod)
summary(amod)
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.31, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
plot(amod)
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.6, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
dat = read.csv("~/work/stat571/hw03/4.12.dat")
dat$obs = factor(rep(1:10, 3))
dat$response.log = log(dat$response)
amod.log = aov(response.log ~ treatment + obs, data=dat)
summary(amod.log)
?shapiro.test
shapiro.test(dat$response.log)
shapiro.test(dat$response.log ~ dat$treatment)
shapiro.test(dat$treatment)
head(dat)
shapiro.test(dat$response.log)
plot(df$obs, df$operator)
plot(df$obs ~ df$operator)
plot(df$obs ~ df$operator)
operator = factor(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)))
order = factor(1:4)
method = c('C', 'B', 'A', 'D', 'D', 'C', 'B', 'A', 'A', 'D', 'C', 'B', 'B', 'A', 'D', 'C')
obs = c(10, 7, 5, 10, 14, 18, 10, 10, 7, 11, 11, 12, 8, 8, 9, 14)
df = data.frame(operator, order, method, obs)
head(df)
plot(df$obs, df$operator)
plot(df$obs, df$order)
plot(df$obs, df$method)
plot(resid(lm(df$obs ~ df$method)))
plot(resid(lm(df$obs ~ df$order)))
plot(resid(lm(df$obs ~ df$operator)))
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.6, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
# Fisher LSD
library(agricolae)
?LSD.test
LSD.test(amod)
LSD.test(amod, trt=tip)
summary(LSD.test(amod, trt=tip))
summary(LSD.test(amod, "tip"))
summary(LSD.test(amod, "coupon"))
lsd = LSD.test(amod, "tip")
str(lsd)
head(sweetpotato)
data(sweetpotato)
?data
head(sweetpotato)
model<-aov(yield~virus, data=sweetpotato)
out <- LSD.test(model,"virus", p.adj="bonferroni")
#stargraph
bar.group(out$groups,ylim=c(0,45),density=4,border="blue")
lsd = LSD.test(amod,"tip", p.adj="bonferroni")
bar.group(lsd$groups,ylim=c(0,45),density=4,border="blue")
plot(lsd)
summary(lsd)
summary(amod)
lsd = LSD.test(amod, "tip", 9, 0.00694)
bar.group(lsd$groups,ylim=c(0,45),density=4,border="blue")
bar.group(lsd$groups,ylim=c(0,45),density=4,border="red")
df$ab <- with(df, interaction("tip", "coupon"))
xi.aov <- aov(x ~ ab, data=tmp)
xi.aov <- aov(x ~ ab, data=df)
df$ab <- with(df, interaction("tip", "coupon"))
df
?interaction
df$ab <- with(df, interaction(df$tip, df$coupon))
?interaction
df
xi.aov <- aov(x ~ ab, data=df)
xi.aov <- aov(response ~ ab, data=df)
summary(xi.aov)
xi.glht <- glht(xi.aov, linfct=mcp(ab="Tukey")) confint(xi.glht)
??confint
?glht
require(multcomp)
df$ab <- with(df, interaction(df$tip, df$coupon))
xi.aov <- aov(response ~ ab, data=df)
summary(xi.aov)
xi.glht <- glht(xi.aov, linfct=mcp(ab="Tukey")) confint(xi.glht)
?glht
?confint
xi.glht <- glht(xi.aov, linfct=mcp(ab="Tukey"))
confint(xi.glht)
require(lattice)
bwplot(x ~ ab, data=tmp)
bwplot(response ~ ab, data=df)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
tuk <- glht(amod, linfct = mcp(circuit="Tukey"))
tuk <- glht(amod, linfct = mcp(response="Tukey"))
head(df)
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.6, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
tuk <- glht(amod, linfct = mcp(response="Tukey"))
tuk <- glht(amod, linfct = mcp(tip="Tukey"))
summary(tuk)
plot(tuk.cld)
tuk.cld <- cld(tuk)
plot(tuk.cld)
?glht
?LSD.test
df$ab <- with(df, interaction(df$tip, df$coupon))
xi.aov <- aov(response ~ ab, data=df)
summary(xi.aov)
xi.glht <- glht(xi.aov, linfct=mcp(ab="Tukey"))
confint(xi.glht)
## graphs
## boxplots
require(lattice)
plot(xi.glht)
xi.cld <- cld(tuk)
plot(xi.cld)
plot(residuals(lm(response ~ tip + coupon, data=df))))
plot(residuals(lm(response ~ tip + coupon, data=df)))
abline(0,0, 'blue')
?abline
abline(0, 0, col='blue')
library(agricolae)
comp1 <- LSD.test(x.aov,"a", group=FALSE)
comp2 <- LSD.test(x.aov,"b", group=TRUE)
# interaction ab
# Tukey's test
comp3 <- HSD.test(xi.aov,"ab")
# graphics
par(mfrow=c(2,2))
bar.err(comp1,ylim=c(0,100), col="yellow")
bar.group(comp2,ylim=c(0,100),density=4,col="blue")
bar.group(comp3,ylim=c(0,100), col="brown",las=2)
bar.err(comp3,ylim=c(0,100),col=0,las=2)
library(agricolae)
tmp <- data.frame(x=c(76, 84, 78, 80, 82, 70, 62, 72,
71, 69, 72, 74, 66, 74, 68, 66,
69, 72, 72, 78, 74, 71, 73, 67,
86, 67, 72, 85, 87, 74, 83, 86,
66, 68, 70, 76, 78, 76, 69, 74,
72, 72, 76, 69, 69, 82, 79, 81),
a=factor(rep(c("A1", "A2"), each = 24)),
b=factor(rep(c("B1", "B2", "B3"), each=8, times=2)))
x.aov <- aov(x ~ a*b, data=tmp)
summary(x.aov)
comp1 <- LSD.test(x.aov,"a", group=FALSE)
comp2 <- LSD.test(x.aov,"b", group=TRUE)
# interaction ab
# Tukey's test
comp3 <- HSD.test(xi.aov,"ab")
# graphics
par(mfrow=c(2,2))
bar.err(comp1,ylim=c(0,100), col="yellow")
bar.group(comp2,ylim=c(0,100),density=4,col="blue")
bar.group(comp3,ylim=c(0,100), col="brown",las=2)
bar.err(comp3,ylim=c(0,100),col=0,las=2)
head(tmp)
x.aov <- aov(x ~ a*b, data=tmp)
summary(x.aov)
comp1 <- LSD.test(x.aov,"a", group=FALSE)
comp2 <- LSD.test(x.aov,"b", group=TRUE)
# interaction ab
# Tukey's test
comp3 <- HSD.test(xi.aov,"ab")
?HSD.test
comp3 <- HSD.test(xi.aov,"ab")
comp1
comp2
require(multcomp)
tuk <- glht(amod, linfct = mcp(tip="Tukey"))
summary(tuk)
tuk.cld <- cld(tuk)
plot(tuk.cld)
tip = factor(c(rep(1,4), rep(2,4), rep(3, 4), rep(4,4)))
coupon = factor(1:4)
response = c(9.3, 9.4, 9.2, 9.7,
9.4, 9.3, 9.4, 9.6,
9.6, 9.6, 9.5, 10.0,
10.0, 9.9, 9.7, 10.2)
df = data.frame(tip, coupon, response)
matrix(df$response, 4, 4)
amod = aov(response ~ tip + coupon, data=df)
summary(amod)
plot(residuals(lm(response ~ tip + coupon, data=df)))
abline(0, 0, col='blue')
library(agricolae)
lsd = LSD.test(df$response, df$t , "tip")
?LSD.test
lsd = LSD.test(lm(response ~ tip + coupon, data=df))
lsd = LSD.test(lm(response ~ tip + coupon, data=df), "response")
summary(lsd)
lsd = LSD.test(lm(response ~ tip + coupon, data=df), "tip")
lsd1 = LSD.test(amod, "tip")
lsd1 = LSD.test(amod, "tip")
lsd2 = LSD.test(amod, "coupon")
df$ab <- with(df, interaction(df$tip, df$coupon))
comp3 <- HSD.test(amod,"ab")
comp3
comp3 <- HSD.test(df,"ab")
require(multcomp)
tuk <- glht(amod, linfct = mcp(tip="Tukey"))
summary(tuk)
tuk.cld <- cld(tuk)
plot(tuk.cld)
plot(df$response, df$tip)
plot(df$tip, df$response)
?plot
plot(df$tip, df$response, type="p")
plot(residuals(lm(response ~ tip, data=df)))
plot(residuals(lm(response ~ coupon, data=df)))
require(zoo)
require(R.utils)
argmax = function(x, y, w=1, ...) {
n         = length(y)
y.smooth  = loess(y ~ x, ...)$fitted
y.max     = rollapply(zoo(y.smooth), 2*w+1, max, align="center")
y.min     = rollapply(zoo(y.smooth), 2*w+1, min, align="center")
delta.max = y.max - y.smooth[-c(1:w, n+1-1:w)]
delta.min = y.min - y.smooth[-c(1:w, n+1-1:w)]
i.max     = which(delta.max <= 0) + w
i.min     = which(delta.min >= 0) + w
list(x=x[i.max], i=i.max, y.hat=y.smooth, y.min=i.min)
}
dat.dir = "~/work/ecol596/project/data"
setwd(dat.dir)
w    = 1
span = .4
i    = 0
dat = read.delim(file.path(dat.dir, "Ac2.fa"), sep=" ", header=F)
colnames(dat) = c("freq", "count")
x = dat$freq
y = dat$count
m = nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
peaks           = argmax(x=x, y=y, w=w, span=span)
first.trough.y  = peaks$y.min[1]
first.trough.x  = x[first.trough.y][1]
first.peak.x    = x[peaks$i][1]
first.peak.y    = peaks$y.hat[peaks$i][1]
dist.to.mid     = first.peak.x - first.trough.x
second.trough.x = first.trough.x + dist.to.mid * 2
y.min           = min(y)
# plot the original histogram
plot(x, y, cex=0.75, col="Gray", main=fname, xlab="count", ylab="frequency")
# draw the smoothed line
lines(x, peaks$y.hat,  lwd=2)
# mark the first peak
points(x = first.peak.x, y = first.peak.y, col="Red", pch=19, cex=1.25)
# draw bars around the peak from left trough to same y on descending curve
segments(first.trough.x, y.min, first.trough.x, first.peak.y, col="Red")
segments(second.trough.x, y.min, second.trough.x, first.peak.y, col="Red")
